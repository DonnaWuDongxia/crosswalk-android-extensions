// Copyright (c) 2014 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by {{code_generator}}. DO NOT MODIFY!

///////////////////////////////////////////////////////////////////////////////
// Utilities
///////////////////////////////////////////////////////////////////////////////

var g_next_async_call_id = 0;
var g_async_calls = {};

function AsyncCall(resolve, reject) {
  this.resolve = resolve;
  this.reject = reject;
}

function createPromise(msg) {
  var promise = new Promise(function(resolve, reject) {
    g_async_calls[g_next_async_call_id] = new AsyncCall(resolve, reject);
  });
  msg.asyncCallId = g_next_async_call_id;
  extension.postMessage(JSON.stringify(msg));
  ++g_next_async_call_id;
  return promise;
}

function _addConstProperty(obj, propertyKey, propertyValue) {
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: false,
    value: propertyValue
  });
}

function _addConstructorProperty(obj, constructor) {
  Object.defineProperty(obj, 'constructor', {
    enumerable: false,
    value: constructor
  });
}

function _addConstPropertyFromObject(obj, propertyKey, propObject) {
  if (propObject.hasOwnProperty(propertyKey)) {
    Object.defineProperty(obj, propertyKey, {
      configurable: true,
      writable: false,
      value: propObject[propertyKey]
    });
  }
}

function derive(child, parent) {
  child.prototype = Object.create(parent.prototype);
  child.prototype.constructor = child;
  _addConstructorProperty(child.prototype, child);
}

///////////////////////////////////////////////////////////////////////////////
// Exports and main entry point for the {{interface_name}} API
///////////////////////////////////////////////////////////////////////////////

//TODO(hdq) var g_{{interface_name|lower}}_listeners = {};

extension.setMessageListener(function(json) {
  var msg = JSON.parse(json);
  switch (msg.cmd) {
{% for method in methods %}
    case '{{method.name}}':
      if (typeof handle{{method.name|capitalize}} === 'function') {
        handle{{method.name|capitalize}}(msg);
      } else {
        g_async_calls[msg.asyncCallId].resolve(msg.data);
        delete _promises[msg.asyncCallId];
      }
      break;
{% endfor %}
    case 'asyncCallError':
      handleAsyncCallError(msg);
      break;
    default:
      break;
  }
});

function handleAsyncCallError(msg) {
  g_async_calls[msg.asyncCallId].reject(Error('Async operation failed'));
  delete _promises[msg.asyncCallId];
}

//TODO(hdq) Find a way to insert developer's specific code in here
{% for method in methods %}
exports.{{method.name}} = function({{method.argument_list}}) {
  var msg = {
    'cmd': '{{method.name}}',
{% for arg in method.arguments %}
    '{{arg.name}}': {{arg.name}},
{% endfor %}
  };
//TODO(hdq) Only return Promise for function defined with Promise
  return createPromise(msg);
};

{% endfor %}
