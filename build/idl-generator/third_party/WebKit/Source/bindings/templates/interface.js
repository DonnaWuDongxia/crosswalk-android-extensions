{##############################################################################}
{% macro handle_cmd_begin(cmd) %}
    case '{{cmd}}':
{%- endmacro %}
{##############################################################################}
{% macro handle_cmd_end(cmd) %}
      if (typeof handle{{cmd|capitalize}} === 'function') {
        handle{{cmd|capitalize}}(msg);
{# Note: currently not able to capitalize words in a string,
   e.g. if cmd is 'contactschange', and if developer would like to provide
   self-defined handler, then need to write 'handleContactschange()',
   instead of 'handleContactsChange()' #}
      } else if (typeof msg.asyncCallId !== 'undefined') {
        g_async_calls[msg.asyncCallId].resolve(msg.data);
      }
      if (typeof msg.asyncCallId !== 'undefined') {
        delete g_async_calls[msg.asyncCallId];
      }
      break;
{% endmacro %}
{##############################################################################}
// Copyright (c) 2014 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by {{code_generator}}. DO NOT MODIFY!

///////////////////////////////////////////////////////////////////////////////
// Utilities
///////////////////////////////////////////////////////////////////////////////

var g_next_async_call_id = 0;
var g_async_calls = {};

function AsyncCall(resolve, reject) {
  this.resolve = resolve;
  this.reject = reject;
}

function _createPromise(msg) {
  var promise = new Promise(function(resolve, reject) {
    g_async_calls[g_next_async_call_id] = new AsyncCall(resolve, reject);
  });
  msg.asyncCallId = g_next_async_call_id;
  extension.postMessage(JSON.stringify(msg));
  ++g_next_async_call_id;
  return promise;
}

function _addConstProperty(obj, propertyKey, propertyValue) {
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: false,
    value: propertyValue
  });
}

function _addConstructorProperty(obj, constructor) {
  Object.defineProperty(obj, 'constructor', {
    enumerable: false,
    value: constructor
  });
}

function _addConstPropertyFromObject(obj, propertyKey, propObject) {
  if (typeof propObject === 'undefined' || !propObject.hasOwnProperty(propertyKey))
    return;
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: false,
    value: propObject[propertyKey]
  });
}

function _setConstProperty(obj, propertyKey, newValue) {
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: true,
  });
  obj[propertyKey] = newValue;
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: false,
  });
}

function _setPropertyForNative(obj, propertyKey, newValue) {
  console.log("hdq in _setPropertyForNative: "+propertyKey);
  obj[propertyKey] = newValue;
  var msg = {
    'cmd': 'js_set_' + propertyKey,
    'data': newValue
  };
  _sendSyncMessage(msg);
}

function _setConstPropertyForNative(obj, propertyKey, newValue) {
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: true,
  });
  obj[propertyKey] = newValue;
  var msg = {
    'cmd': 'set' + propertyKey,
    'data': newValue
  };
  _sendSyncMessage(msg);
  Object.defineProperty(obj, propertyKey, {
    configurable: true,
    writable: false,
  });
}

function _sendSyncMessage(msg) {
    return extension.internal.sendSyncMessage(JSON.stringify(msg));
};

function derive(child, parent) {
  child.prototype = Object.create(parent.prototype);
  child.prototype.constructor = child;
  _addConstructorProperty(child.prototype, child);
}

///////////////////////////////////////////////////////////////////////////////
// Exports and main entry point for the {{interface_name}} API
///////////////////////////////////////////////////////////////////////////////

{% set manager_name = interface_name|capitalize %}
{% set manager = {
    'name': '%sManager' % manager_name,
    'prototype': '%sManager.prototype' % manager_name } %}
{% set listeners = 'g_%s_listeners' % interface_name|lower %}
{% set g_manager = 'g_%s_manager' % interface_name|lower %}
var {{listeners}} = {};
{% for attribute in attributes if attribute.idl_type == 'EventHandler' %}
{{listeners}}['{{attribute.name|replace('on', '', 1)}}'] = [];
{% endfor %}

function {{manager.name}}() {
{% for attribute in attributes if attribute.idl_type == 'EventHandler' %}
  this.{{attribute.name}} = null;
{% endfor %}
}

function isValidType(type) {
  return (
{% for attribute in attributes if attribute.idl_type == 'EventHandler' %}
    type === '{{attribute.name|replace('on', '', 1)}}' ||
{% endfor %}
    false);
}

{{manager.prototype}}.addEventListener = function(type, callback) {
  if (typeof callback !== 'function' || !isValidType(type))
    return;

  if ({{listeners}}[type].indexOf(callback)) {
    {{listeners}}[type].push(callback);
  }
};

{{manager.prototype}}.removeEventListener = function(type, callback) {
  if (typeof callback !== 'function' || !isValidType(type))
    return;

  var index = {{listeners}}[type].indexOf(callback);
  if (index >= 0) {
    {{listeners}}[type].splice(index, 1);
  }
};

{{manager.prototype}}.dispatchEvent = function(event) {
  if (typeof event !== 'object' || !isValidType(event.type))
    return false;

  var handled = true;
  {{listeners}}[event.type].forEach(function(callback) {
      var res = callback(event);
      if (!res && handled)
        handled = false;
    });

  return handled;
};

{% for method in methods %}
{{manager.prototype}}.{{method.name}} = function({{method.argument_list}}) {
  var msg = {
    'cmd': '{{method.name}}',
{% for arg in method.arguments %}
    '{{arg.name}}': {{arg.name}},
{% endfor %}
  };
{# TODO(hdq) Only return Promise for function defined with Promise:
             if method.idl_type == 'Promise' #}
  return _createPromise(msg);
};
{% endfor %}

var {{g_manager}} = new {{manager.name}}();
exports = {{g_manager}};

extension.setMessageListener(function(json) {
  var msg = JSON.parse(json);
  switch (msg.cmd) {
{% for method in methods %}
{{handle_cmd_begin(method.name)}}
{{handle_cmd_end(method.name)}}
{% endfor %}
{##}
{% for attribute in attributes if attribute.idl_type == 'EventHandler' %}
{% set event = '%s' % attribute.name|replace('on', '', 1) %}
{{handle_cmd_begin(event)}}
      var event = new CustomEvent('{{event}}');
      _addConstProperty(event, 'msg', msg);
      {{g_manager}}.dispatchEvent(event);
      if (typeof {{g_manager}}.{{attribute.name}} === 'function') {
        {{g_manager}}.{{attribute.name}}(event);
      }
{{handle_cmd_end(event)}}
{% endfor %}
{##}
{% for attribute in attributes if attribute.idl_type != 'EventHandler' %}
    case 'set_{{attribute.name}}':
    {% if attribute.is_read_only == True %}
      _setConstProperty({{g_manager}}, '{{attribute.name}}', msg.data);
    {% else %}
      {{g_manager}}['{{attribute.name}}'] = msg.data;
    {% endif %}
      break;
{% endfor %}
    case 'asyncCallError':
      handleAsyncCallError(msg);
      break;
    default:
      break;
  }
});

{{manager.prototype}}.setProperty = function(propertyKey, value) {
  try {
    {{g_manager}}[propertyKey] = value;
    _setPropertyForNative({{g_manager}}, propertyKey, value);
  } catch(e) { // If the property is readonly will throw a TypeError
    console.log(e);
  }
}

function handleAsyncCallError(msg) {
  if (typeof msg.asyncCallId === 'undefined')
    return;

  g_async_calls[msg.asyncCallId].reject(Error('Async operation failed'));
  delete _promises[msg.asyncCallId];
}
